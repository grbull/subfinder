import { IOrdinalConverter } from '../interfaces/IOrdinalConverter';

const ORDINALS = [
  'Zero',
  'First',
  'Second',
  'Third',
  'Fourth',
  'Fifth',
  'Sixth',
  'Seventh',
  'Eight',
  'Ninth',
  'Tenth',
  'Eleventh',
  'Twelfth',
  'Thirteenth',
  'Fourteenth',
  'Fifteenth',
  'Sixteenth',
  'Seventeenth',
  'Eighteenth',
  'Nineteenth',
  'Twentieth',
  'Twenty-First',
  'Twenty-Second',
  'Twenty-Third',
  'Twenty-Fourth',
  'Twenty-Fifth',
  'Twenty-Sixth',
  'Twenty-Seventh',
  'Twenty-Eight',
  'Twenty-Ninth',
  'Thirtieth',
  'Thirty-First',
  'Thirty-Second',
  'Thirty-Third',
  'Thirty-Fourth',
  'Thirty-Fifth',
  'Thirty-Sixth',
  'Thirty-Seventh',
  'Thirty-Eight',
  'Thirty-Ninth',
  'Fortieth',
  'Forty-First',
  'Forty-Second',
  'Forty-Third',
  'Forty-Fourth',
  'Forty-Fifth',
  'Forty-Sixth',
  'Forty-Seventh',
  'Forty-Eight',
  'Forty-Ninth',
  'Fiftieth',
  'Fifty-First',
  'Fifty-Second',
  'Fifty-Third',
  'Fifty-Fourth',
  'Fifty-Fifth',
  'Fifty-Sixth',
  'Fifty-Seventh',
  'Fifty-Eight',
  'Fifty-Ninth',
  'Sixtieth',
  'Sixty-First',
  'Sixty-Second',
  'Sixty-Third',
  'Sixty-Fourth',
  'Sixty-Fifth',
  'Sixty-Sixth',
  'Sixty-Seventh',
  'Sixty-Eight',
  'Sixty-Ninth',
  'Seventieth',
  'Seventy-First',
  'Seventy-Second',
  'Seventy-Third',
  'Seventy-Fourth',
  'Seventy-Fifth',
  'Seventy-Sixth',
  'Seventy-Seventh',
  'Seventy-Eight',
  'Seventy-Ninth',
  'Eightieth',
  'Eighty-First',
  'Eighty-Second',
  'Eighty-Third',
  'Eighty-Fourth',
  'Eighty-Fifth',
  'Eighty-Sixth',
  'Eighty-Seventh',
  'Eighty-Eight',
  'Eighty-Ninth',
  'Ninetieth',
  'Ninety-First',
  'Ninety-Second',
  'Ninety-Third',
  'Ninety-Fourth',
  'Ninety-Fifth',
  'Ninety-Sixth',
  'Ninety-Seventh',
  'Ninety-Eight',
  'Ninety-Ninth',
  'Hundredth',
  // 'Thousandth',
];

export class OrdinalConverter implements IOrdinalConverter {
  /**
   * Converts a number to a number ordinal. (Eg. 1 => First, 2 => Second)
   *
   * @param numberString The number to represent as an ordinal.
   * @returns Returns the oridinal of the number provided.
   */
  public convert(numberString: string): string {
    const seasonNumber = parseInt(numberString, 10);
    if (ORDINALS[seasonNumber]) {
      return ORDINALS[seasonNumber];
    }
    throw new Error('Missing Ordinal for ' + numberString);
  }
}
